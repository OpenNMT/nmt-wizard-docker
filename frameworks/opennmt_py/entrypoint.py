import os
import copy
import subprocess
import six
import re
import shlex

from nmtwizard.framework import Framework
from nmtwizard.logger import get_logger

logger = get_logger(__name__)


class OpenNMTPYFramework(Framework):
    def __init__(self):
        super(OpenNMTPYFramework, self).__init__()
        self._onmt_py_dir = os.getenv('OPENNMT_PY_DIR', '/root/OpenNMT-py')

    def train(self,
              config,
              src_file,
              tgt_file,
              model_path=None,
              gpuid=0):
        options_preprocess = copy.deepcopy(config['options']['config']['preprocess'])

        if (("valid_src" not in options_preprocess) or
            ("valid_tgt" not in options_preprocess) or
            (not os.path.isfile(options_preprocess["valid_src"])) or
            (not os.path.isfile(options_preprocess["valid_tgt"]))):
            valid_suffix = ".valid"
            src_file_valid = src_file + valid_suffix
            tgt_file_valid = tgt_file + valid_suffix
            # generate validation set
            self._run_command(None, ["head -1000", src_file], out_file=src_file_valid)
            self._run_command(None, ["head -1000", tgt_file], out_file=tgt_file_valid)
            options_preprocess["valid_src"] = src_file_valid
            options_preprocess["valid_tgt"] = tgt_file_valid

        # binarize
        bin_file = self._data_dir+"/bin"
        self._run_command(None, ["python", " preprocess.py",
                                 "-train_src", src_file,
                                 "-train_tgt", tgt_file,
                                 "-save_data", bin_file] +
                          _buildCommandLineOptions(options_preprocess))

        options_train = copy.deepcopy(config['options']['config']['train'])

        options_train["start_epoch"] = 1
        if "epochs" not in options_train:
            options_train["epochs"] = 1
        options_train["data"] = bin_file
        options_train["save_model"] = self._output_dir + "/model"
        if gpuid > 0:
            options_train["gpuid"] = gpuid - 1
        if model_path is not None:
            options_train["train_from"] = os.path.join(model_path, "model.pt")

        self._run_command(None, ["python", " train.py"] + _buildCommandLineOptions(options_train))

        # find output epochs - should be only one
        outputs = os.listdir(self._output_dir)
        models = filter(re.compile(
            'model_acc_[\d.]+_ppl_[\d.]+_e'+str(options_train["epochs"])+'.pt$').search, outputs)
        # there should be only one
        if not models:
            raise RuntimeError('no model generated by the training')
        if len(models) > 1:
            raise RuntimeError('more than one model generated by the training')

        model_file = os.path.join(self._output_dir, models[0])
        return {"model.pt": model_file}

    def trans(self, config, model_path, input, output, gpuid=0):
        options_trans = copy.deepcopy(config['options']['config']['trans'])
        options_trans["model"] = os.path.join(model_path, "model.pt")
        options_trans["src"] = input
        options_trans["output"] = output
        if gpuid > 0:
            options_trans["gpu"] = gpuid - 1
        self._run_command(
            None, ["python", " translate.py"] + _buildCommandLineOptions(options_trans))

    def serve(self, *arg, **kwargs):
        raise NotImplementedError('serving is not supported yet for OpenNMT-py')

    def forward_request(self, *arg, **kwargs):
        raise NotImplementedError()

    def _run_command(self, env, cmd, out_file = None):
        run_env = os.environ.copy()
        if env is not None:
            for k, v in six.iteritems(env):
                logger.debug("ENV %s", k + "=" + str(v))
                run_env[k] = str(v)

        stdout = None
        if out_file is not None:
            stdout = open(out_file,"wb")

        logger.debug("RUN %s", " ".join(cmd))
        subprocess.call(
            shlex.split(" ".join(cmd)),
            cwd=self._onmt_py_dir,
            env=run_env,
            stdout=stdout)

def _buildCommandLineOptions(options):
    opts = []
    for k, v in six.iteritems(options):
        if k is not None:
            if v != "false":
                opts.append('-%s' % k)
                if v != "true":
                    opts.append(str(v))
    return opts


if __name__ == '__main__':
    OpenNMTPYFramework().run()
